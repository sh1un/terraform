name: "Demo service Infrastructure Change Management Pipeline with GitHub Actions"

on:
  pull_request:
    types: [opened, synchronize, reopened, closed]
  push:
    branches:
      - main
      - dev
    paths:
      - practice/api_gateway_to_lambda_docker_to_dynamodb/**

env:
  TF_LOG: INFO
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  TF_DIR: ./practice/api_gateway_to_lambda_docker_to_dynamodb

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  preview:
    name: "Deploy Preview Environment"
    if: github.event_name == 'pull_request' && github.event.action != 'closed'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.3

      - name: Terraform Init
        run: terraform init -backend-config="preview.tfbackend" -reconfigure
        working-directory: ${{ env.TF_DIR }}

      - name: Terraform Destroy (Cleanup)
        run: terraform destroy -auto-approve -var-file='preview.tfvars'
        working-directory: ${{ env.TF_DIR }}
        continue-on-error: true

      - name: Terraform Plan
        run: terraform plan -var-file='preview.tfvars' -out=tfplan
        working-directory: ${{ env.TF_DIR }}

      - name: Terraform Apply
        run: terraform apply -var-file='preview.tfvars'
        working-directory: ${{ env.TF_DIR }}

      - name: Comment PR
        uses: actions/github-script@v6
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'Preview environment has been deployed. You can now test your changes.'
            })

  cleanup_preview:
    name: "Cleanup Preview Environment"
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.3

      - name: Terraform Init
        run: terraform init -backend-config="preview.tfbackend" -reconfigure
        working-directory: ${{ env.TF_DIR }}

      - name: Terraform Destroy
        run: terraform destroy -auto-approve -var-file='preview.tfvars'
        working-directory: ${{ env.TF_DIR }}

  deploy:
    name: "Deploy to Target Environment"
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true)
    runs-on: ubuntu-latest
    needs: [cleanup_preview]
    steps:
      - uses: actions/checkout@v3

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.3

      - name: Set Environment Variables
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "ENVIRONMENT=prod" >> $GITHUB_ENV
            echo "TF_VARS_FILE=prod.tfvars" >> $GITHUB_ENV
          elif [[ "${{ github.ref }}" == "refs/heads/dev" ]]; then
            echo "ENVIRONMENT=dev" >> $GITHUB_ENV
            echo "TF_VARS_FILE=dev.tfvars" >> $GITHUB_ENV
          else
            echo "Unsupported branch: ${{ github.ref }}"
            exit 1
          fi

      - name: Terraform Init
        run: terraform init -backend-config="${{ env.ENVIRONMENT }}.tfbackend" -reconfigure
        working-directory: ${{ env.TF_DIR }}

      - name: Terraform Destroy (Cleanup)
        run: terraform destroy -auto-approve -var-file='${{ env.TF_VARS_FILE }}'
        working-directory: ${{ env.TF_DIR }}
        continue-on-error: true

      - name: Terraform Plan
        run: terraform plan -var-file='${{ env.TF_VARS_FILE }}' -out=tfplan
        working-directory: ${{ env.TF_DIR }}

      - name: Terraform Apply
        run: terraform apply -var-file='${{ env.TF_VARS_FILE }}' -auto-approve
        working-directory: ${{ env.TF_DIR }}
